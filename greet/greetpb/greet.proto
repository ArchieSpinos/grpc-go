syntax = "proto3";

package greet;
option go_package="greetpb";

message Greeting {
    string first_name = 1;
    string last_name = 2;
}

message CalcPrimes {
    int64 number_to_calc = 1;
}

message GreetRequest {
    Greeting greeting = 1;
}

message GreetResponse {
    string result = 1;
}

message GreetManyTimesRequest {
    Greeting greeting = 1;
}

message GreetManyTimesResponse {
    string result = 1;
}

message CalcPrimesRequest {
    CalcPrimes calcprimes = 1;
}

message CalcPrimesResponse {
    int64 result = 1;
}

message LongGreetRequest {
    Greeting greeting = 1;
}

message LongGreetResponse {
    string result = 1;
}

message ComputeAverageRequest {
    double num = 1;
}

message ComputeAverageResponse {
    double avg = 1;
}

message GreetEveryoneRequest {
    Greeting greeting = 1;
}

message GreetEveryoneResponse {
    string result = 1;
}

message FindMaximumRequest {
    double num = 1;
}

message FindMaximumResponse {
    double num = 1;
}

message SquareRootRequest {
    int32 number = 1;
}

message SquareRootResponse {
    double number_root = 1;
}

message WithDeadlineResponse {
    string result = 1;
}

message WithDeadlineRequest {
    Greeting greeting = 1;
}

service GreetService{
    // Unary
    rpc Greet(GreetRequest) returns (GreetResponse) {};

    rpc GreetManyTimes(GreetManyTimesRequest) returns (stream GreetManyTimesResponse) {};

    rpc CalcPrimes(CalcPrimesRequest) returns (stream CalcPrimesResponse) {};

    rpc LongGreet(stream LongGreetRequest) returns (LongGreetResponse) {};

    rpc ComputeAverage(stream ComputeAverageRequest) returns (ComputeAverageResponse) {};

    rpc GreetEveryone(stream GreetEveryoneRequest) returns (stream GreetEveryoneResponse) {};

    rpc FindMaximum(stream FindMaximumRequest) returns (stream FindMaximumResponse) {};

    // error handling
    // this RPC will throw an exception if the send number is a negative
    // the error being sent is of type INVALID_ARGUMENT
    rpc SquareRoot(SquareRootRequest) returns (SquareRootResponse) {};

    rpc WithDeadline(WithDeadlineRequest) returns (WithDeadlineResponse) {};
}